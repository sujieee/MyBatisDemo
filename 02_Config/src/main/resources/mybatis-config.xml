<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
<!--
1.mybatis可以使用properties来引入外部properties配置文件的内容
    resource: 引入类路径下的资源
    url: 引入网络路径/磁盘路径下的资源
-->
    <properties resource="dbconfig.properties"/>
<!--
2.settings包含很多重要的设置项
    setting:用来设置每一个设置项
        name:设置项的名
        value:设置项的取值
-->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>
<!--
3.typeAliases: 别名处理器，可以为Java类型起别名
    别名不区分大小写
    typeAlias: 为某个Java类型起别名
        type: 指定要起别名的类型全类名;默认别名就是类名小写；例如employee
        alias: 指定新的别名
    package: 为某个包下的所有类型批量起别名
        name: 指定包名（为当前包以及下面的所有后代包的每一个类起默认别名（类名小写））
    批量起别名的情况下，使用@Alias注解为某个类型指定新的别名
-->
    <typeAliases>
<!--        <typeAlias type="com.jie.mybatis.bean.Employee" alias="emp"/>-->
        <package name="com.jie.mybatis.bean"/>
    </typeAliases>
<!--
4.environments: mybatis可以配置多种环境,default指定指用某种环境，来切换环境，可以达到快速切换环境
    environment: 配置一个具体的环境信息，必须有两个标签；id代表当前环境的唯一标识
        transactionManager: 事务管理器
            type: 事务管理器类型；JDBC（JdbcTransactionFactory） MANAGED（ManagedTransactionFactory）
                自定义事务管理器：实现TransactionFactory接口，type指定全类名
        dataSource: 数据源；
            type：数据源类型；UNPOOLED(UnpooledDataSourceFactory)|POOLED(PooledDataSourceFactory)|JNDI(JndiDataSourceFactory)
                自定义数据源：实现DataSourceFactory接口，type指定全类名
-->
    <environments default="development">
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

<!--
5.databaseIdProvider: 支持多数据库厂商
    type="DB_VENDOR": VendorDatabaseIdProvider
        作用就是得到数据库厂商标识（驱动getDatabaseProductName()），mybatis就能根据数据库厂商标识来执行不同的sql
         MySQL,Oracle...
-->
<!--    标签编写都是有顺序的，比如databaseIdProvider标签不能写在environments标签前面-->
    <databaseIdProvider type="DB_VENDOR">
<!--        为不同的数据库厂商起别名-->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
    </databaseIdProvider>
<!--
6.mappers:将sql映射注册到全局配置中
-->
    <mappers>
<!--
mapper:注册一个sql映射
    resource：引用类路径下的sql映射文件
    url: 引用网络路径或磁盘路径下的sql映射文件
    class: 引用（注册）接口,1.有sql映射文件，映射文件名必须与接口同名，并且放在接口同一目录下
                         2.没有sql映射文件，所有的sql都是利用注解写在接口上
           推荐：比较重要的Dao接口，写sql映射文件
                不重要的，简单的Dao接口为了开发快速可以使用注解
-->
        <mapper resource="mapper/EmployeeMapper.xml"/>
        <mapper class="com.jie.mybatis.dao.EmployeeMapperAnnotation"/>
<!--        批量注册 xml映射文件必须和dao接口放在同一个包下才可以成功注册-->
<!--        <package name="com.jie.mybatis.dao"/>-->
    </mappers>
</configuration>